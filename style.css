/* Import from google fonts */
@import url('https://fonts.googleapis.com/css2?family=Lato&display=swap');

/* Reference to font in assets */
@font-face {
    font-family: "Monsterrat Bold";
    src: url(/assets/fonts/Montserrat-Bold.ttf);
}

:root {
    --content-width: 95%
}

/* General reset of margin, padding and setting box sizing to border box */
body,
body>* {
    margin: 0;
}

*,
*::before,
*::after {
    box-sizing: border-box;
}

/* Rules as specified for screens under 600px, some overwritten later.*/
html {
    font-family: Lato, sans-serif;
    font-size: 14px;
}

body {
    background-image: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);

    font-size: 1.2rem;
    width: 100%
}

h1,
h2,
h3 {
    font-family: "Monsterrat Bold", sans-serif;
}

h1 {
    font-size: 4rem;
}

h2 {
    font-size: 2.2rem;
}

p {
    max-width: 70ch;
    line-height: 1.5;
}

/* Sets the widht of body elements exept header */
body>*:not(header) {
    width: var(--content-width);
}

header>div {
    width: var(--content-width);
}

header {
    position: relative;

    height: 55vh;
    width: 100%;
    margin: 0 auto;

    background-image: url(/assets/img/studentsbg.png);
    background-position: top;
    background-size: cover;
    background-attachment: fixed;
}

header>div {
    /* Absolutely positioned relative to the header. With a -4rem bottom offset */
    position: absolute;
    bottom: -4rem;
    left: 50%;
    transform: translate(-50%, 0);

    padding: 2rem;
    
    background-color: #c5192d;
    
    text-align: center;
    color: white;
}

/* Makes the text in the header center aligned even on very large displays. 
Needed because of the max-width on paragraphs */
header p {
    margin: 0 auto;
}

main {
    margin: calc(4rem + 2rem) auto 2rem auto;

    background-color: whitesmoke;
    box-shadow: 0 0 1px 0 darkgray;
}


/* Styling of the articles in the main section */
main>article {
    padding: 2rem;
    position: relative;

    border-bottom: 0.1px solid lightgray;
}

/* Styling of the first article only */
main>article:first-of-type {
    padding: 2rem;

    /* Used to create an isolated stacking context so the pseudo element with the 
    background color doesn't end up behind the element */
    isolation: isolate;
}

/* Background color as a pseudo element so it can be 
resized to fit the left column on larger screen sizes */
main>article:first-of-type::before {
    content: "";

    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;

    z-index: -1;

    background-color: #c5192d;
}

main>article:first-of-type li {
    list-style: none;
}

main>article:first-of-type li::before {
    width: 1rem;
    margin: 1rem 1rem 0rem;
}

/* Styling the list bullets as emojies */
main>article:first-of-type li:nth-child(1)::before {
    content: "\1F64C"; /* Raised hands */
}

main>article:first-of-type li:nth-child(2)::before {
    content: "\1F3EB"; /* School */
}

main>article:first-of-type li:nth-child(3)::before {
    content: "\1F4DA"; /* Pile of books */
}

main>article>img {
    max-width: 100%;
}

/* The following media queery is used to fix the order of the image and text in the articles */
@media screen and (max-width: 600px) {

    /* The following two rulesets defines the article as a table and places any content following an image in the
    header of the table (i.e before the image). This is a flexible way to fix the order and would work for any amount
    of disordered articles */
    main>article {
        display: table;
    }

    main>article>img ~ * {
        display: table-header-group;
    }

    /* The following two rulesets could also be used to achieve the same result but is a more spesific aproach that 
    targets an entire article. This aproach is  perhaps simpler but would need to be repeated for each article 
    that is ordered incorrectly. */

    /* 
    main>article:nth-of-type(3) {
        transform: scaleY(-1);
    }
    
    main>article:nth-of-type(3)>* {
        transform: scaleY(-1);
    }  
    */

    /* Neither of these aproaches work very well for a colmn layout like we use at larger screen sizes so they are
    contained in this media queery. A better aproach would be to restructure the html if a solution suitable for any 
    screen size was needed. */
}

/* General styling of the footer */
footer {
    margin: 0 auto;
    padding: 1rem 2rem;

    background-color: #c5192d;

    text-align: center;
    color: white;
}

/* Makes the text in the footer center aligned even on very large displays. 
Needed because of the max-width on paragraphs */
footer p {
    margin: 0 auto;
}

footer a {
    color: inherit;
}

/* Rules for screen > 600px */
@media screen and (min-width: 600px) {
    html {
        font-size: 16px;
    }

    body {
        --content-width: 85%
    }

    header {
        height: 65vh;
    }

    main>article {
        text-align: justify;
    }

    #intro-container::before {
        right: 50%;
    }

    /* The folowing two rulesets make the alignement of the article contents a perfect 45% 10%(margin) 45%.
    Without them the space between the inline elements would take up a few pixels and the contents would owerflow 
    to the next line. The font size is reset to the global 1.2rem right away so its just the container that has a 
    font size of 0, and no other text is affected.
    */
    main>article {
        font-size: 0;
    }

    main>article>* {
        font-size: 1.2rem;
    }

    main>article>* {
        display: inline-block;
        text-align: left;
        
        width: 45%;
        
        vertical-align: top;
    }
    
    main>article>*:first-child {
        margin-right: 10%;
    }

    main>article>*:last-child {
        background-color: whitesmoke;
        height: 100%;
    }
}

/* Rules for screen > 960px */
@media screen and (min-width: 960px) {
    html {
        font-size: 24px;
    }

    body {
        --content-width: 85%
    }

}